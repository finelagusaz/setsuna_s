//******************************************************************************
// YAYA　ゴーストテンプレート
// トーク辞書
//******************************************************************************


//******************************************************************************
// ランダムトーク
//******************************************************************************
RandomTalk
{
    TOSTR(EVAL(CHR(0x22)+RandomTalkEx()+CHR(0x22)))
}

//------------------------------------------------------------------------------
//ランダムトーク本体：この中にランダムトークを記載してください
//ここのみ常に ' ' で括って書いてください。
//上のRandomTalkの中身で%( )を展開していますので、" "を使わなくてもOKです。
//高速化対策
//------------------------------------------------------------------------------
RandomTalkEx : nonoverlap
{
	_seasonslot = GetSeasonSlot
	_timeslot = GetTimeSlot

	_talk_array = IARRAY

	if modeonline == 1 {
		_talk_array ,= aryOnlineTalk
	}

	if modeonline != 1 {
		_talk_array ,= aryImpressionOfflineTalk
		_talk_array ,= aryExplainOfflineTalk
		_talk_array ,= aryDayOfflineTalk

		case _timeslot {
			when "夜","深夜"
				_talk_array ,= aryImpressionNightTalk
		}
	}

	_talk_array ,= aryImpressionTalk
	_talk_array ,= aryExplainTalk
	
	case _seasonslot
	{
		when "夏" {
			_talk_array ,= aryDaySummerTalk

			case _timeslot
			{
				when "夜","深夜"
					_talk_array ,= aryDaySummerNgihtTalk
			}
		}
		when "秋"
			_talk_array ,= aryDayAutumnTalk
		when "冬" {
			_talk_array ,= aryDayWinterTalk

			case _timeslot
			{
				when "夜","深夜"
					_talk_array ,= aryDayWinterNgihtTalk
			}
		}
	}

	_talk_array ,= aryDayTalk

	parallel _talk_array
}

//------------------------------------------------------------------------------
//チェイントーク
//------------------------------------------------------------------------------
再起動
{{CHAIN
	'\1\s[10](Info:デスクトップが表示される。再起動が終わったらしい)\w9\n\n[half]/
	\0\s[0]これで再開できる。\w9\n/
	\s[2000]大切なことと言われても、\w4やっぱり中断されるのは……。\e::chain=end'
}}CHAIN

換気終了
{{CHAIN
	'\1\s[10](瞬子は窓を閉めた。)\w9\n\n[half]/
	\0\s[5]これだけ換気すれば大丈夫ね。\e:chain=end'
}}CHAIN

誕生日について
{{CHAIIN
	'\0\s[5]あった。\w9\n/
	11/03ね。 \e:chain=end'
}}CHAIN

//******************************************************************************
//キーが押された
//******************************************************************************
/*
//------------------------------------------------------------------------------
//OnKeyPressイベント
//------------------------------------------------------------------------------
//キーボードの任意のキーが押されたときに発動するイベントです。
//ファンクションキーを指定するときは、"f1"等と指定します。
//押されたキーはreference0に格納されます。
//if文、もしくはcase~when文で分岐させると良いでしょう。
*/

OnKeyPress
{
	case reference0 {
		when "t" {
			OnAiTalk
		}
		when "m" {
			if ISFUNC('OpenMenu') {
				OpenMenu
			}
			else {
				'\![raise,OnMouseDoubleClick,0,0,0,0,__SYSTEM_KEYDOWN_COL,0,mouse]'
			}
		}
	}
}

//******************************************************************************
//時報/重なり
//******************************************************************************

//------------------------------------------------------------------------------
//OnMinuteChangeイベント
//------------------------------------------------------------------------------

OnMinuteChange
{
	//---- 時間の分を見て 0 であれば時報。それ以外のときは重なり処理を行う

	if minute == 0
	{
		if hour == 12
		{
			"\0\s[0]もうお昼?\w9\n/
			\s[5]何か食べる?\w9"
		}
		elseif hour == 15
		{
			"\0\s[5]おやつにしましょ。\w9\n/
			ケーキがあったと思うから、\w4一緒に食べよ?\w9"
		}
		--
		"\e"
	}
	elseif AYATEMPLATE.mikireflag == 1
	{
		//---- 分 != 0 、かつ見切れていたら見切れ中のトークを行う
		MikireTalk
	}
}


//******************************************************************************
//見切れ
//******************************************************************************

//------------------------------------------------------------------------------
//OnSecondChangeイベント
//1 秒毎に実行される。ここではあまり重い処理を行わないこと
//このテンプレートでは、見切れ処理のみ行っている
//---------------------------------------------------------------------------
OnSecondChange
{

	if AYATEMPLATE.mikireflag == 1 && reference[1] == 0
	{
		//---- 見切れの終了
		EndMikireTalk
	}
	AYATEMPLATE.mikireflag = reference[1]
}

//------------------------------------------------------------------------------
//見切れ中
//------------------------------------------------------------------------------
MikireTalk
{
	"\0\s[0]隅っこ……。\e"
}

//------------------------------------------------------------------------------
//見切れ終了
//------------------------------------------------------------------------------
EndMikireTalk
{
	"\0\s[6]ふぅ……。\e"
}

//******************************************************************************
//サーフィス復元
//******************************************************************************

//------------------------------------------------------------------------------
//OnSurfaceRestoreイベント
//------------------------------------------------------------------------------
OnSurfaceRestore
{
	"\0\s[0]\1\s[10]\e"
}

//******************************************************************************
//トランスレータ
//******************************************************************************

//------------------------------------------------------------------------------
//OnTranslateイベント
//------------------------------------------------------------------------------
OnTranslate
{
	//とりあえず最初のおまじない(一時変数にとりあえず代入)
	_text = reference[0]
	
	//テキストのみトランスレート+ウェイトコントロール
	//etc.dicに記述
	_text = TextOnlyTranslator(_text,'TextOnlyTranslatorFunc')
	
	//結果を返す為のもの。
	_text
}

//------------------------------------------------------------------------------
//OnTranslateInternalイベント
//------------------------------------------------------------------------------
//OnTranslateがYAYA→本体→YAYAと、一度本体を経由するのに対して、
//OnTranslateInternalはYAYA内部でのトランスレートです。
//そのため、reference変数などが変更されない状態でこの関数に渡されます。
//引数は、_argv[0]が、本体に渡す寸前のトークの内容です。
//動かないようにコメントアウトしています。
/*
OnTranslateInternal
{
	_text = _argv[0]
	_text = REPLACE(_text, "。", "にゅ。")
	_text
}
*/
